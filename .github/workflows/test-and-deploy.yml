name: Test & Deploy

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:
  workflow_dispatch:
  release:
    types:
      - published

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}/base

jobs:
  build-base-image:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      cache-hit: ${{ steps.cache-check.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate dependency hash
        id: deps-hash
        run: |
          DEPS_HASH=$(cat requirements.txt package.json package-lock.json | sha256sum | cut -d' ' -f1)
          echo "hash=$DEPS_HASH" >> $GITHUB_OUTPUT

      - name: Check if base image exists
        id: cache-check
        run: |
          # Check if an image with this dependency hash already exists
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:deps-${{ steps.deps-hash.outputs.hash }} > /dev/null 2>&1; then
            echo "cache-hit=true" >> $GITHUB_OUTPUT
            echo "Base image cache hit!"
          else
            echo "cache-hit=false" >> $GITHUB_OUTPUT
            echo "Base image cache miss, will build new image"
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}
          tags: |
            type=raw,value=deps-${{ steps.deps-hash.outputs.hash }}
            type=raw,value=latest
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push base image
        if: steps.cache-check.outputs.cache-hit != 'true'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.base
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DEPS_HASH=${{ steps.deps-hash.outputs.hash }}

  test:
    runs-on: ubuntu-latest
    needs: build-base-image

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: "15"
          check-latest: true

      - name: Generate dependency hash
        id: deps-hash
        run: |
          DEPS_HASH=$(cat requirements.txt package.json package-lock.json | sha256sum | cut -d' ' -f1)
          echo "hash=$DEPS_HASH" >> $GITHUB_OUTPUT

      - name: Create .env file
        run: make envvar

      - name: Pull base image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:deps-${{ steps.deps-hash.outputs.hash }}

      - name: Build application image
        run: |
          export BASE_IMAGE=${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:deps-${{ steps.deps-hash.outputs.hash }}
          make build-app

      - name: Run tests
        run: |
          export JAZZBAND_IMAGE=jazzband-website:latest
          make ci

      # Copy coverage XML from Docker container to host
      - name: Copy coverage XML from container
        run: |
          # The coverage files are in the project directory inside the container
          docker cp jazzband-website-web-1:/app/coverage.xml ./coverage.xml || echo "Failed to copy coverage.xml"

      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml

  deploy:
    if: github.event.action == 'published' && github.repository == 'jazzband/website'

    runs-on: ubuntu-latest

    needs: [test]

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push
        uses: dokku/github-action@v1.7.0
        # enable verbose ssh output
        with:
          branch: "main"
          git_push_flags: "--force"
          git_remote_url: ${{ secrets.SSH_REMOTE_URL }}
          ssh_private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: ${{ github.ref }}
